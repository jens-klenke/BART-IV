---
title: "Discrete BCF vs SBCF with Cost function"
author: "Jens and Lennard"
format: 
  pdf:
    documentclass: scrartcl
    papersize: letter
    include-in-header:
      - text: |
          \usepackage{placeins}
---
```{r set-up, include = FALSE}
knitr::opts_chunk$set(fig.align = 'center', fig.height = 1.75, 
                      echo = F, eval = T, cache = T)

source(here::here('01_code/packages.R'))

# report functions
source(here::here('04_reports/report_functions/report_fun.R'))

estimation_results_raw <- readRDS(here::here('03_sim_results/discrete_covariates_cost_func.rds'))

estimation_results_raw_sqrtn <- readRDS(here::here('03_sim_results/discrete_covariates_cost_func_sqrtn.rds'))

estimation_results_raw_n <- readRDS(here::here('03_sim_results/discrete_covariates_cost_func_n.rds'))
```


```{r data wranling, include = FALSE}
estimation_results <- estimation_results_raw %>%
  # unnest results
  tidyr::unnest(results) %>%
  # # name results 
  dplyr::mutate(result_names = names(results)) %>%
  # parse ID 
  dplyr::mutate(ID = readr::parse_number(str_extract(path_in, "_(?:.(?!_))+$"))) %>%
  # delselect unimportant variables
  dplyr::select(-c(row_num, path_in)) %>%
  #  filter for main results
  dplyr::filter(result_names %in% c('bcf_results', 's_bcf_results')) %>%
  # force same datatype
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, node = as.character(node)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, CCACE = as.double(CCACE)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, pvalue = as.double(pvalue)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Weak_IV_test = as.double(Weak_IV_test)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_obs = as.double(Pi_obs)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, ITT = as.double(ITT)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_compliers = as.double(Pi_compliers)))) %>%
  # unnest bcf and bcfs results
  tidyr::unnest(results) %>%
  dplyr::arrange(ncov, ID) %>%
  dplyr::mutate(subgroup = dplyr::case_when(
    node == 'x1>=0.5 & x2>=0.5' | node == 'x2>=0.5 & x1>=0.5' |
    node == 'x2> 0.5 & x1> 0.5' | node == 'x1> 0.5 & x2> 0.5' ~ 'negative effect',
    node == 'x2< 0.5 & x1< 0.5' | node == 'x1< 0.5 & x2< 0.5' |
    node == 'x2<=0.5 & x1<=0.5' | node == 'x1<=0.5 & x2<=0.5' ~ 'positive effect',
    .default = NA)
    )

estimation_results_ncov_10 <- estimation_results %>%
  dplyr::filter(ncov == 10) %>%
  dplyr::group_by(result_names, subgroup)

estimation_results_ncov_50 <- estimation_results %>%
  dplyr::filter(ncov == 50) %>%
  dplyr::group_by(result_names, subgroup)

estimation_results_ncov_100 <- estimation_results %>%
  dplyr::filter(ncov == 100) %>%
  dplyr::group_by(result_names, subgroup)


## odda-ratio sqrt n
estimation_results_sqrtn <- estimation_results_raw_sqrtn %>%
  # unnest results
  tidyr::unnest(results) %>%
  # # name results 
  dplyr::mutate(result_names = names(results)) %>%
  # parse ID 
  dplyr::mutate(ID = readr::parse_number(str_extract(path_in, "_(?:.(?!_))+$"))) %>%
  # delselect unimportant variables
  dplyr::select(-c(row_num, path_in)) %>%
  #  filter for main results
  dplyr::filter(result_names %in% c('bcf_results', 's_bcf_results')) %>%
  # force same datatype
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, node = as.character(node)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, CCACE = as.double(CCACE)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, pvalue = as.double(pvalue)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Weak_IV_test = as.double(Weak_IV_test)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_obs = as.double(Pi_obs)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, ITT = as.double(ITT)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_compliers = as.double(Pi_compliers)))) %>%
  # unnest bcf and bcfs results
  tidyr::unnest(results) %>%
  dplyr::arrange(ncov, ID) %>%
  dplyr::mutate(subgroup = dplyr::case_when(
    node == 'x1>=0.5 & x2>=0.5' | node == 'x2>=0.5 & x1>=0.5' |
    node == 'x2> 0.5 & x1> 0.5' | node == 'x1> 0.5 & x2> 0.5' ~ 'negative effect',
    node == 'x2< 0.5 & x1< 0.5' | node == 'x1< 0.5 & x2< 0.5' |
    node == 'x2<=0.5 & x1<=0.5' | node == 'x1<=0.5 & x2<=0.5' ~ 'positive effect',
    .default = NA)
    )

estimation_results_ncov_10_sqrtn <- estimation_results_sqrtn %>%
  dplyr::filter(ncov == 10) %>%
  dplyr::group_by(result_names, subgroup)

ncov_10_both_deteced_sqrtn <- estimation_results_ncov_10_sqrtn %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())

estimation_results_ncov_50_sqrtn <- estimation_results_sqrtn %>%
  dplyr::filter(ncov == 50) %>%
  dplyr::group_by(result_names, subgroup)

ncov_50_both_deteced_sqrtn <- estimation_results_ncov_50_sqrtn %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())

estimation_results_ncov_100_sqrtn <- estimation_results_sqrtn %>%
  dplyr::filter(ncov == 100) %>%
  dplyr::group_by(result_names, subgroup)

ncov_100_both_deteced_sqrtn <- estimation_results_ncov_100_sqrtn %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())

# odds ratio * n 

estimation_results_n <- estimation_results_raw_n %>%
  # unnest results
  tidyr::unnest(results) %>%
  # # name results 
  dplyr::mutate(result_names = names(results)) %>%
  # parse ID 
  dplyr::mutate(ID = readr::parse_number(str_extract(path_in, "_(?:.(?!_))+$"))) %>%
  # delselect unimportant variables
  dplyr::select(-c(row_num, path_in)) %>%
  #  filter for main results
  dplyr::filter(result_names %in% c('bcf_results', 's_bcf_results')) %>%
  # force same datatype
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, node = as.character(node)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, CCACE = as.double(CCACE)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, pvalue = as.double(pvalue)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Weak_IV_test = as.double(Weak_IV_test)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_obs = as.double(Pi_obs)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, ITT = as.double(ITT)))) %>%
  dplyr::mutate(results = purrr::map(results, ~ dplyr::mutate(.x, Pi_compliers = as.double(Pi_compliers)))) %>%
  # unnest bcf and bcfs results
  tidyr::unnest(results) %>%
  dplyr::arrange(ncov, ID) %>%
  dplyr::mutate(subgroup = dplyr::case_when(
    node == 'x1>=0.5 & x2>=0.5' | node == 'x2>=0.5 & x1>=0.5' |
    node == 'x2> 0.5 & x1> 0.5' | node == 'x1> 0.5 & x2> 0.5' ~ 'negative effect',
    node == 'x2< 0.5 & x1< 0.5' | node == 'x1< 0.5 & x2< 0.5' |
    node == 'x2<=0.5 & x1<=0.5' | node == 'x1<=0.5 & x2<=0.5' ~ 'positive effect',
    .default = NA)
    )

estimation_results_ncov_10_n <- estimation_results_n %>%
  dplyr::filter(ncov == 10) %>%
  dplyr::group_by(result_names, subgroup)

ncov_10_both_deteced_n <- estimation_results_ncov_10_n %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())

estimation_results_ncov_50_n <- estimation_results_n %>%
  dplyr::filter(ncov == 50) %>%
  dplyr::group_by(result_names, subgroup)

ncov_50_both_deteced_n <- estimation_results_ncov_50_n %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())

estimation_results_ncov_100_n <- estimation_results_n %>%
  dplyr::filter(ncov == 100) %>%
  dplyr::group_by(result_names, subgroup)

ncov_100_both_deteced_n <- estimation_results_ncov_100_n %>%
  dplyr::filter(subgroup %in% c('negative effect', 'positive effect')) %>%
  dplyr::group_by(result_names, ID) %>%
  dplyr::count() %>%
  dplyr::filter(n == 2) %>%
  dplyr::group_by(result_names) %>%
  dplyr::summarise(n = dplyr::n())
```

# Results for $10$ Covaraites 

```{r table_10, message = FALSE, warning = FALSE}
dplyr::bind_rows(
  # odds ratio 
  estimation_results_ncov_10 %>%
    analyse_df(),
  # odds ratio * sqrt(n)
  estimation_results_ncov_10_sqrtn %>%
    analyse_df(),
  # odds ratio * n
  estimation_results_ncov_10_n %>%
    analyse_df()) %>%
  knitr::kable(booktabs = TRUE, linesep = "", format = 'latex',
              caption= 'Results with $10$ Covariates.', 
              digits = 3, 
              col.names = 
                c(' ',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both'),  
              escape = FALSE, align = 'lrrrrrrrrrr') %>% 
  kable_styling(latex_options = c("striped", "hold_position")) %>%
  kableExtra::add_header_above(c('', 'BCF ' = 5, 'S BCF' = 5)) %>%
  kableExtra::pack_rows("Odds Ratio", 1, 2, 
                        escape = FALSE) %>% 
  kableExtra::pack_rows("Odds Ratio times sqrt N", 3, 4,
                        escape = FALSE)  %>%
  kableExtra::pack_rows("$Odds Ratio times N$", 5, 6,
                        escape = FALSE) 
```

\FloatBarrier

# 50 Covaraites 

```{r table_50, message = FALSE, warning = FALSE}
dplyr::bind_rows(
  # odds ratio 
  estimation_results_ncov_50 %>%
    analyse_df(),
  # odds ratio * sqrt(n)
  estimation_results_ncov_50_sqrtn %>%
    analyse_df(),
  # odds ratio * n
  estimation_results_ncov_50_n %>%
    analyse_df()) %>%
  knitr::kable(booktabs = TRUE, linesep = "", format = 'latex',
              caption= 'Results with $50$ Covariates.', 
              digits = 3, 
              col.names = 
                c(' ',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both'),  
              escape = FALSE, align = 'lrrrrrrrrrr') %>% 
  kable_styling(latex_options = c("striped", "hold_position")) %>%
  kableExtra::add_header_above(c('', 'BCF ' = 5, 'S BCF' = 5)) %>%
  kableExtra::pack_rows("Odds Ratio", 1, 2, 
                        escape = FALSE) %>% 
  kableExtra::pack_rows("Odds Ratio times sqrt N", 3, 4,
                        escape = FALSE)  %>%
  kableExtra::pack_rows("Odds Ratio times N", 5, 6,
                        escape = FALSE) 
```

\FloatBarrier

# 100 Covaraites 

\FloatBarrier

```{r table_100, message = FALSE, warning = FALSE}
dplyr::bind_rows(
  # odds ratio 
  estimation_results_ncov_100 %>%
    analyse_df(),
  # odds ratio * sqrt(n)
  estimation_results_ncov_100_sqrtn %>%
    analyse_df(),
  # odds ratio * n
  estimation_results_ncov_100_n %>%
    analyse_df()) %>%
  knitr::kable(booktabs = TRUE, linesep = "", format = 'latex',
              caption= 'Results with $100$ Covariates.', 
              digits = 3, 
              col.names = 
                c(' ',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both',
                  '$N$' ,'$share$', '$\\bar{CACCE}$', 
                  '$\\sigma_{CACCE}$', 'both'),  
              escape = FALSE, align = 'lrrrrrrrrrr') %>% 
  kable_styling(latex_options = c("striped", "hold_position")) %>%
  kableExtra::add_header_above(c('', 'BCF ' = 5, 'S BCF' = 5)) %>%
  kableExtra::pack_rows("Odds Ratio", 1, 2, 
                        escape = FALSE) %>% 
  kableExtra::pack_rows("Odds Ratio times sqrt N", 3, 4,
                        escape = FALSE)  %>%
  kableExtra::pack_rows("Odds Ratio times N", 5, 6,
                        escape = FALSE) 
```






\FloatBarrier
\newpage

# Results with odd-ratio-$\sqrt{n}-$cost function

The cost for a variable selected in the binary tree is defined as: 

$$cost_i = \dfrac{\max \{p\}}{p_i} \ \sqrt{n}$$

